embed
<drac2>
using(baglib="4119d62e-6a98-4153-bea9-0a99bb36da2c")
a = &ARGS&
args = argparse(&ARGS&)
ch = character()
hasBags = ch.get_cvar("bags")
cc = "Festival Ticket Punches"
prizeOptions = load_json(get_gvar("461a83c0-d051-420f-a18a-3b058bafa696"))
trinketOptions = load_json(get_gvar("39345cb0-81ce-480b-9515-073ca756c550"))
gameOptions = load_json(get_gvar("fc331e8d-6904-49a5-8d66-93fb5d42771d"))

# Make sure we have a custom counter for our ticket punches
ch.create_cc_nx(cc, 0, 10, 'none', 'bubble', reset_to=0)

# Refill the ticket punches if they visit the ticket booth
if a[0].lower() == "ticket":
    ch.set_cc(cc, 10)
    return f"""-title "{name} purchases a festival ticket!" -desc "You've purchased a ticket for this festival! Go have fun!" -f "{cc}|{ch.cc_str(cc)}" """

# If they aren't buying a ticket, make sure they have enough punches to play games!
if ch.get_cc(cc) == 0:
    return f"""-title "{name} tries to play a game!" -desc "You don't have any tickets to play games! You can purchase a ticket with `!festival ticket`." -f "{cc}|{ch.cc_str(cc)}" """

# Trahas' Trinket booth. This is at every festival, so it gets special handling
# Roll a d20 and randomly pick from the trinket list
if a[0].lower() == "trinket" or a[0].lower() == "trinkets":
    ch.mod_cc(cc, -1)
    randomTrinket = vroll("1d20")
    trinket = trinketOptions[str(randomTrinket.total)]

    if hasBags:
        bags = baglib.load_bags()
        baglib.modify_item(bags, trinket, 1, "Festival Prizes", True)
        baglib.save_bags(bags)
    
    return f"""-title "{name} picks a random tinket from Trahas' Frost-veiled Trinkets!" -desc "**Meta**\nRandom Roll!\n\n{randomTrinket}" -f "You won: {trinket}!\n\nYour prize has been added to your Festival Prizes bag!" -f "{cc}|{ch.cc_str(cc)} (-1)" """

# Dunk a Dwarf/Concilor booth. This is at every festival, so it gets special handling
# Roll a dex check to see if they hit the target, DC 15
# If they hit, roll a str check to see if they have enough force to trigger, DC 15
# If both are successful, they win a prize!
if a[0].lower() == "dunk" or a[0].lower() == "dunk a councilor" or a[0].lower() == "councilor" or a[0].lower() == "council":
    ch.mod_cc(cc, -1)

    # Roll a dex check to see if they hit the target, DC 15
    accuracyRollStr = ch.skills.dexterity.d20()
    accuracyRoll = vroll(accuracyRollStr)

    # If they miss, don't try to roll strength, they've failed
    if accuracyRoll.total < 15:
        return f"""-title "{name} attempts to Dunk the Councilor!" -desc "**Meta**\nDC 15 Dexterity Check\n\nDexterity: {accuracyRoll}; **Failure!**" -f "{cc}|{ch.cc_str(cc)} (-1)" """
    
    # Roll a str check to see if they have enough force to trigger, DC 15
    forceRollStr = ch.skills.strength.d20()
    forceRoll = vroll(forceRollStr)

    # If both are successful, they win a prize!
    if forceRoll.total >= 15:
        randomPrize = vroll(f"1d{len(prizeOptions)}")
        prize = prizeOptions[randomPrize.total - 1]
        prizeOut = f"""-f "**Random Prize**: {prize}!" """

        if hasBags:
            bags = baglib.load_bags()
            baglib.modify_item(bags, prize, 1, "Festival Prizes", True)
            baglib.save_bags(bags)
            prizeOut = f"""-f "**Random Prize**: {prize}!\n\nYour prize has been added to your Festival Prizes bag!" """
        
        return f"""-title "{name} Dunks the Councilor!" -desc "**Meta**\nDC 15 Dexterity Check\n\nDexterity: {accuracyRoll}; **Success!**\n\nDC 15 Strength Check\n\nStrength: {forceRoll}; **Success!**" {prizeOut} -f "{cc}|{ch.cc_str(cc)} (-1)" """
    else:
        return f"""-title "{name} attempts to Dunk the Councilor!" -desc "**Meta**\nDC 15 Dexterity Check\n\nDexterity: {accuracyRoll}; **Success!**\n\nDC 15 Strength Check\n\nStrength: {forceRoll}; **Failure!**" -f "{cc}|{ch.cc_str(cc)} (-1)" """

# Let's find the game they want to play
gameSelection = ([g for g in gameOptions if a[0].lower() == g.lower()] if a else []) or [g for g in gameOptions if a[0].lower() in g.lower()] if a else []

if len(gameSelection) == 0:
    err(f"_ _\nI'm sorry, I don't know of any games by that name.  Please try again.")

if len(gameSelection) > 1:
    err(f"_ _\nThere are many games that match that description: `{'`, `'.join(gameSelection)}`.  Could you be more specific?")

# We have one and only one game from the list, let's play it!
# Start by taking a ticket punch
ch.mod_cc(cc, -1)

prizeOut = ""
state = "Failure!"
# Now find the check for the game and roll it!
game = gameOptions[gameSelection[0]]
rollString = ch.skills[game['check']].d20()

# Two of three will make a series of rolls and check them against a list of DCs
# Two of three is leinient, so we make one extra roll and then require one less success
# i.e. Best two out of three style (Ring Toss on Aetherion, 3 rings, hit a DC 15 and 17 to win)
#
# Progressive will make a series of rolls and check them against a list of DCs
# Each roll must pass the DC to make the next roll
# As soon as we fail, we do not roll anymore
#
# The fallback game type is "Single", which is just a single roll of an ability check against a static DC
if game.style == "twoOfThree":
    metaDCs = ", ".join([str(dc) for dc in game.dcList])
    dcLength = len(game.dcList)
    numChecks = dcLength + 1

    # Collect the rollTotals up to the number of checks specified for the game
    rollTotals = []
    rolls = []
    for i in range(0, len(game.dcList)+1):
        rollResult = vroll(rollString)
        rollTotals.append(rollResult.total)
        rolls.append(rollResult)
    
    # Collect the roll outputs
    metaRolls = "\n".join([str(r) for r in rolls])

    # Now check that we have passed the DCs
    rollTotals.sort()
    game.dcList.sort()

    i, j, count = 0, 0, 0
    while i < len(rollTotals) and j < len(game.dcList):
        if rollTotals[i] >= game.dcList[j]:
            count += 1
            j += 1
        i += 1
    
    if count >= len(game.dcList):
        state = "Success!"
        # The roll was higher than the game DC! Pick a random prize!
        randomPrize = vroll(f"1d{len(prizeOptions)}")
        prize = prizeOptions[randomPrize.total - 1]
        prizeOut = f"""-f "**Random Prize**: {prize}!" """

        # If bags are configured, add the prize to the character's inventory
        if hasBags:
            bags = baglib.load_bags()
            baglib.modify_item(bags, prize, 1, "Festival Prizes", True)
            baglib.save_bags(bags)
            prizeOut = f"""-f "**Random Prize**: {prize}!\n\nYour prize has been added to your Festival Prizes bag!" """
        
    # Finally output the results of trying to play the game!
    return f"""-title "{name} attempts the {game.name}!" -desc "Roll {numChecks} checks and meet at least {dcLength} DCs.\n\n**Meta**\nDC {metaDCs} {game.check.title()} Checks\n\n{metaRolls}\n**{state}**" {prizeOut} -f "{cc}|{ch.cc_str(cc)} (-1)" """
elif game.style == "progressive":
    metaDCs = ", then ".join([str(dc) for dc in game.dcList])
    numChecks = len(game.dcList)
    progressiveSuccess = True
    rolls = []
    descriptions = []

    # Roll for each DC in the list
    for i in range(0, len(game.dcList)):
        rollResult = vroll(rollString)
        rolls.append(rollResult)
        descriptions.append(f"""-f "{game.descriptions[i]}" """)

        # If we fail a roll, we stop rolling
        if rollResult.total < game.dcList[i]:
            progressiveSuccess = False
            break
    
    # Collect the roll outputs
    metaRolls = "\n".join([str(r) for r in rolls])
    metaDescriptions = " ".join([str(d) for d in descriptions])

    # If we've met or exceeded all the DCs, we win a prize!
    if progressiveSuccess:
        randomPrize = vroll(f"1d{len(prizeOptions)}")
        prize = prizeOptions[randomPrize.total - 1]
        prizeOut = f"""-f "**Random Prize**: {prize}!" """

        if hasBags:
            bags = baglib.load_bags()
            baglib.modify_item(bags, prize, 1, "Festival Prizes", True)
            baglib.save_bags(bags)
            prizeOut = f"""-f "**Random Prize**: {prize}!\n\nYour prize has been added to your Festival Prizes bag!" """
        return f"""-title "{name} attempts the {game.name}!" -desc "Roll {numChecks} checks and match DCs in order.\n\n**Meta**\nDC {metaDCs} {game.check.title()} Checks\n\n{metaRolls}\n**Success!**" {prizeOut} {metaDescriptions} -f "{cc}|{ch.cc_str(cc)} (-1)" """
    else:
        return f"""-title "{name} attempts the {game.name}!" -desc "Roll {numChecks} checks and match DCs in order.\n\n**Meta**\nDC {metaDCs} {game.check.title()} Checks\n\n{metaRolls}\n**Failure!**" {metaDescriptions} -f "{cc}|{ch.cc_str(cc)} (-1)" """
else:
    rollResult = vroll(rollString)

    if rollResult.total >= game.dc:
        state = "Success!"
        # The roll was higher than the game DC! Pick a random prize!
        randomPrize = vroll(f"1d{len(prizeOptions)}")
        prize = prizeOptions[randomPrize.total - 1]
        prizeOut = f"""-f "**Random Prize**: {prize}!" """

        # If bags are configured, add the prize to the character's inventory
        if hasBags:
            bags = baglib.load_bags()
            baglib.modify_item(bags, prize, 1, "Festival Prizes", True)
            baglib.save_bags(bags)
            prizeOut = f"""-f "**Random Prize**: {prize}!\n\nYour prize has been added to your Festival Prizes bag!" """

    # Finally output the results of trying to play the game!
    return f"""-title "{name} attempts the {game.name}!" -desc "**Meta**\nDC {game.dc} {game.check.title()} Check\n\n{game.check.title()}: {rollResult}; **{state}**" {prizeOut} -f "{cc}|{ch.cc_str(cc)} (-1)" """
</drac2>
-thumb {{ch.image}}
-footer "Festival Games | !festival"