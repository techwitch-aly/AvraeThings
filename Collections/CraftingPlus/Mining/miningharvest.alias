embed
<drac2>
using(baglib="4119d62e-6a98-4153-bea9-0a99bb36da2c")
args = &ARGS&
a = argparse(&ARGS&)
action = "tries to harvest"
ch = character()
harvestables = load_json(get_gvar("97458d50-2bde-4751-9af1-952208b92f2e"))
kpl_cc = "Knowledge from a Past Life"
fog_cc = "Flash of Genius"
extraFields = ""
bagMessage = ""

# Determine advantage from args
adv = True if "adv" in a else None

# Collect manual roll bonuses
bonus = a.join("b", "+")

# Check for guidance
guidance = "+1d4[guidance]" if a.last("guidance") else ""

# Make sure we have something to harvest
if not args[0]:
    return f"""-desc "Make sure you try to harvest something! Please pass in the ore or gem you want to extract!" -f "Example: `!mining harvest copper`" """

target = args[0].title()
targetSearch = args[0].lower()
# Make sure it's something we can harvest
if not targetSearch in harvestables["dcLookup"]:
    return f"""-desc "Couldn't find `{targetSearch}` as something to harvest, double check your spelling and the list of found ore or gems!" """

# Make sure it's something the user actually found
foundSavedVar = ch.get_cvar("crafting_plus_mining")
if not foundSavedVar:
    return f"""-desc "You didn't find any ore or gems to harvest! Use `!mining` to find something to mine!" """

foundMaterials = load_json(foundSavedVar)
matchedMaterial = ([a for a in foundMaterials if targetSearch == a]) or [a for a in foundMaterials if targetSearch in a]
if len(matchedMaterial) == 0:
    options = "\n".join([s.title() for s in foundMaterials])
    return f"""-desc "You didn't find any `{target}` to harvest! Double check the list of found ore or gems!" -f "\n\nYou might have found: ```{options}```\nUse `!mining harvest` to gather your resources.\nExample: `!mining harvest iron`" """
else:
    target = matchedMaterial[0].title()

# Setup up the athletics check
rollString = ch.skills.athletics.d20(adv)

# Add any manual bonuses
if bonus:
    rollString += f"+{bonus}"

# Add guidance if it's there
if guidance != "":
    rollString += guidance
    extraFields += f"""-f "Guidance|Once before the spell ends, the target can roll a d4 and add the number rolled to one ability check of its choice. It can roll the die before or after making the ability check. The spell then ends." """

# Add Knowledge from a Past Life and update Counter
if a.last("kpl") and ch.cc_exists(kpl_cc) and character().get_cc(kpl_cc) > 0:
    rollString += "+1d6[kpl]"
    ch.mod_cc(kpl_cc, -1)
    extraFields += f"""-f "{kpl_cc}|You temporarily remember glimpses of the past, perhaps faded memories from ages ago or a previous life. When you make an ability check that uses a skill, you can roll a d6 immediately after seeing the number on the d20 and add the number on the d6 to the check.\n{ch.cc_str(kpl_cc)}" """
elif a.last("kpl") and ch.cc_exists(kpl_cc) and character().get_cc(kpl_cc) == 0:
    extraFields += f"""-f "{kpl_cc}|You must take a long rest to regain your expended uses.\n{ch.cc_str(kpl_cc)}" """
elif a.last("kpl") and not ch.cc_exists(kpl_cc):
    extraFields += f"""-f "{kpl_cc}|You do not have this ability." """

# Add Flash of Genius and update Counter
if a.last("fog") and ch.cc_exists(fog_cc) and character().get_cc(fog_cc) > 0:
    rollString += f"+{intelligenceMod}"
    ch.mod_cc(fog_cc, -1)
    extraFields += f"""-f "{fog_cc}|You gain the ability to come up with solutions under pressure. When you or another creature you can see within 30 feet of you makes an ability check or a saving throw, you can use your reaction to add your Intelligence modifier (**+{intelligenceMod}**) to the roll.\n{ch.cc_str(fog_cc)}" """
elif a.last("fog") and ch.cc_exists(fog_cc) and character().get_cc(fog_cc) == 0:
    extraFields += f"""-f "{fog_cc}|You must take a long rest to regain your expended uses.\n{ch.cc_str(fog_cc)}" """
elif a.last("fog") and not ch.cc_exists(fog_cc):
    extraFields += f"""-f "{fog_cc}|You do not have this ability." """

harvestItRoll = vroll(rollString)
dc = harvestables["dcLookup"][args[0].lower()]

if harvestItRoll.total < dc:
    action = "fails to harvest"
    return f"""-desc "**Meta:**\nDC {dc} Athletics Check\nAthletics: {harvestItRoll}" -f "Unfortunately you couldn't extract anything on this trek into the mines." {extraFields} """
else:
    # We found something AND we could extract!
    # How much did we get?
    amount = vroll("1d5")

    # See if the user has Bags configured
    hasBags = ch.get_cvar("bags")
    if hasBags:
        # If they are, keep track of Ore found in the bags
        bags = baglib.load_bags()
        baglib.modify_item(bags, target, amount.total, "Mining", True)
        baglib.save_bags(bags)
        bagMessage = f"""-f "Bags Updated|{amount.total} {target} added to your bags!" """

    # Update the action text and return the embed
    action = "successfully harvests"

    # Clean up the cvar
    ch.delete_cvar("crafting_plus_mining")
    return f"""-desc "**Meta:**\nDC {dc} Athletics Check\nAthletics: {harvestItRoll}\n\n**Meta:**\n{amount}\n Found {amount.total} {target}!" {extraFields} {bagMessage} """
</drac2>
-title "{{name}} {{action}} {{target}}!"
-footer "CraftingPlus | !mining harvest"