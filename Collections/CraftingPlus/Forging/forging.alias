embed
<drac2>
using(baglib="4119d62e-6a98-4153-bea9-0a99bb36da2c")
# Setup
a = &ARGS&
args = argparse(&ARGS&)
ch = character()
craftingOptions = load_json(get_gvar("a7b9d388-764c-4b45-aa73-ce878b9d74e4"))

# VALIDATE!
# We need some kind of proficiency to craft
toolProVar = ch.get_cvar("toolProficiencies")
if not toolProVar:
    return f"""-title "{ch.name} attempts to forge ingots! But has no Tool Proficiencies Learned." -desc "Crafting requires tool proficiencies, please see `!tool help` for help adding proficiencies." """

toolProficiencies = load_yaml(toolProVar)

# Validate that we have Smith's Tools proficiency or expertise
if "smithstools" not in toolProficiencies:
    return f"""-desc "{ch.name} attempts to forge ingots! But doesn't have Smith's Tool Proficiency." -f "Forging requires Smith's Tool proficiency, please see `!tool help` for help adding proficiencies." """

# What kind of ingot are we making?
# Validate that what they want to craft is something we allow
itemSearch = ([k for k in craftingOptions if a[0].lower() == k] if a else []) or [k for k in craftingOptions if a[0].lower() in k] if a else []

if len(itemSearch) == 0:
    return f"""-desc "Forging - Couldn't Find Item" -f "Search was: `{a[0]}`" """

if len(itemSearch) > 1:
    return f"""-desc "The blacksmith is confused." -f "There are many items that match that description: `{'`, `'.join(itemSearch)}`. Could you be more specific?" """

# We found a single thing to craft, let's make it!
itemToCraft = craftingOptions[itemSearch[0]]

# If the character has bags setup, try to find the raw materials that are required.
# If bags are setup and no materials are found, abort crafting
hasBags = ch.get_cvar("bags")
if hasBags:
    bags = baglib.load_bags()
    for material, _ in itemToCraft.materials.items():
        if baglib.find_bag_with_item(bags, material) is None:
            return f"""-desc "Missing Materials" -f "You are missing the required materials ({material}) to craft {itemToCraft.name}." """

# BONUS SETUP
# Determine advantage from args
adv = True if "adv" in args else None

# Collect manual roll bonuses
bonus = args.join("b", "+")

# Check for guidance
guidance = "+1d4[guidance]" if args.last("guidance") else ""

# Setup the roll
rollString = ch.skills.intelligence.d20(adv)

# Add proficiency or expertise
rollString += f"+{ch.stats.prof_bonus}" if toolProficiencies.smithstools == 1 else f"+{ch.stats.prof_bonus * 2}"

# Add any manual bonuses
if bonus:
    rollString += f"+{bonus}"

# Add guidance if supplied
if guidance != "":
    rollString += guidance

craftItRoll = vroll(rollString)

if craftItRoll.total < itemToCraft.dc:
    # Failure!
    lostMaterials = ""
    if craftItRoll.result.crit == 2:
        if hasBags:
            # We need to remove the materials from the bags
            for material, amount in itemToCraft.materials.items():
                baglib.modify_item(bags, material, -amount, "Mining")
                lostMaterials += f"\n- {amount} {material.title()} removed from bags."

            # We need to save the bags
            lostMaterials = f"""-f "Bags Updated|{lostMaterials}" """
            baglib.save_bags(bags)
        return f"""-desc "**Meta:**\nDC {itemToCraft.dc} Smithing (Intelligence) Check\nSmithing (Intelligence): {craftItRoll}; Critical Failure!" -f "Unfortunately you couldn't forge the {itemToCraft.name} and the materials were lost." {lostMaterials} """
    else:
        return f"""-desc "**Meta:**\nDC {itemToCraft.dc} Smithing (Intelligence) Check\nSmithing (Intelligence): {craftItRoll}; Failure!" -f "Unfortunately you couldn't forge the {itemToCraft.name}." """
else:
    # Success!
    # If the character has Bags setup...
    bagMessage = ""
    if hasBags:
        # We need to remove the materials from the bags
        for material, amount in itemToCraft.materials.items():
            baglib.modify_item(bags, material, -amount, "Mining")
            bagMessage += f"\n- {amount} {material.title()} removed from bags."

        # We need to add the ingot to the bags
        baglib.modify_item(bags, itemToCraft.name, 1, "Ingots", True)
        bagMessage += f"\n- 1 {itemToCraft.name} added to bags."

        # We need to save the bags
        bagMessage = f"""-f "Bags Updated|{bagMessage}" """
        baglib.save_bags(bags)
    
    return f"""-desc "**Meta:**\nDC {itemToCraft.dc} Smithing (Intelligence) Check\nSmithing (Intelligence): {craftItRoll}; Success!" -f "**Crafted**: {itemToCraft.name} x1" {bagMessage} """

</drac2>
-title "{{name}} works the forge!"
-footer "CraftingPlus | !forging"